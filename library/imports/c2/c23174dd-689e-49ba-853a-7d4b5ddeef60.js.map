{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;AAWR,aAAK,EAAE;AACH,uBAAS,IAAI;AACb,gBAAI,EAAE,EAAE,CAAC,IAAI;SAChB;KACJ;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,CAAC,YAAY,EAAE,CAAC;KACvB;;AAGD,gBAAY,EAAE,wBAAU;AACpB,UAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;AACjD,UAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,gBAAgB,GAAG,IAAI,CAAC;;;AAG1D,YAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;;;AAGvD,YAAI,QAAQ,GAAG;AACX,iBAAK,EAAE,EAAE,CAAC,aAAa,CAAC,gBAAgB;AACvC,wBAAY,EAAE,sBAAS,KAAK,EAAE,KAAK,EAAE;AAClC,oBAAI,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;AACnC,oBAAI,EAAE,CAAC,YAAY,CAAC,cAAc,CAAE,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;AAClE,2BAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBACtB,MACI;AACD,2BAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;iBAC1B;;AAED,uBAAO,IAAI,CAAC;aACf;SACJ,CAAA;;AAED,UAAE,CAAC,YAAY,CAAC,WAAW,CAAC,QAAQ,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAEnD;;AAED,aAAS,EAAE,qBAAY;AACnB,UAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,OAAO,GAAG,KAAK,CAAC;AAClD,UAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,gBAAgB,GAAG,KAAK,CAAC;KAC9D;;CAMJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        actor: {\r\n            default: null,\r\n            type: cc.Node\r\n        },\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.initListener();\r\n    },\r\n\r\n\r\n    initListener: function(){\r\n        cc.director.getCollisionManager().enabled = true;\r\n        cc.director.getCollisionManager().enabledDebugDraw = true;\r\n        \r\n        // console.log(this.actor);\r\n        var collider = this.actor.getComponent(cc.BoxCollider);\r\n        // console.log(collider);\r\n        \r\n        var listener = {\r\n            event: cc.EventListener.TOUCH_ONE_BY_ONE, \r\n             onTouchBegan: function(touch, event) {\r\n                var touchLoc = touch.getLocation();\r\n                if (cc.Intersection.pointInPolygon (touchLoc, collider.world.points)) {\r\n                    console.log('Hit');\r\n                }\r\n                else {\r\n                    console.log('Not hit');\r\n                }\r\n                \r\n                return true;\r\n            },\r\n        }\r\n        \r\n        cc.eventManager.addListener(listener,this.node);\r\n        \r\n    },\r\n    \r\n    onDisable: function () {\r\n        cc.director.getCollisionManager().enabled = false;\r\n        cc.director.getCollisionManager().enabledDebugDraw = false;\r\n    },\r\n    \r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}